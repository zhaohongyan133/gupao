SpringAOP：
    这种编程理念是将有相同需求的代码进行整合，减少代码的重复率，提高代码的复用性，它主要用来解决一些系统层面的问题
    Spring中应用场景如：Authentication、Transaction
    它的基本概念有：
        Aspect：切面，通常是一个类，里面可以定义切入点和通知
        JoinPoint：连接点，程序执行过程中的明确的点，一般是方法调用
        Advice：通知，在特定切入点的增强处理，例如，before、after、around
        PointCut：切入点，待用通知的连接点在程序中主要体现为写入切入点表达是AOP框架的创建对象，
            实际就是使用代理目标对象进行功能增强。Spring中的AOP代理可以使用JDK动态代理，
            也可以使用CGLib代理，前者基于接口，后者基于子类

SpringIOC和DI：
    IOC是一种设计思想，就是由spring来控制对象的生命周期和对象之间的关系
    DI是依赖注入，例如Spring中的注释@Autowired，就是使用DI来注入到对象
    Spring中提供了两种IOC容器：BeanFactory、ApplicationContext
